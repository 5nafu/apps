// Generated by CoffeeScript 1.4.0

/*
# ownCloud
#
# @author Bernhard Posselt
# Copyright (c) 2012 - Bernhard Posselt <nukeawhale@gmail.com>
#
# This file is licensed under the Affero General Public License version 3 or later.
# See the COPYING-README file
#
*/


(function() {

  angular.module('OC', []);

  /*
  # ownCloud
  #
  # @author Bernhard Posselt
  # Copyright (c) 2012 - Bernhard Posselt <nukeawhale@gmail.com>
  #
  # This file is licensed under the Affero General Public License version 3 or later.
  # See the COPYING-README file
  #
  */


  angular.module('AppTemplateAdvanced', ['OC']).config([
    '$provide', function($provide) {
      var Config;
      Config = {
        myParam: 'test'
      };
      Config.routes = {
        saveNameRoute: 'apptemplate_advanced_ajax_setsystemvalue'
      };
      return $provide.value('Config', Config);
    }
  ]);

  /*
  # ownCloud - News app
  #
  # @author Bernhard Posselt
  # Copyright (c) 2012 - Bernhard Posselt <nukeawhale@gmail.com>
  #
  # This file is licensed under the Affero General Public License version 3 or later.
  # See the COPYING-README file
  #
  */


  /*
  # This file creates instances of classes
  */


  angular.module('OC').factory('ModelPublisher', [
    '_ModelPublisher', function(_ModelPublisher) {
      return new _ModelPublisher();
    }
  ]);

  /*
  # ownCloud - News app
  #
  # @author Bernhard Posselt
  # Copyright (c) 2012 - Bernhard Posselt <nukeawhale@gmail.com>
  #
  # This file is licensed under the Affero General Public License version 3 or later.
  # See the COPYING-README file
  #
  */


  /*
  # Used for properly distributing received model data from the server
  */


  angular.module('OC').factory('_ModelPublisher', function() {
    var ModelPublisher;
    ModelPublisher = (function() {

      function ModelPublisher() {
        this.subscriptions = {};
      }

      ModelPublisher.prototype.subscribeModelTo = function(model, name) {
        var _base;
        (_base = this.subscriptions)[name] || (_base[name] = []);
        return this.subscriptions[name].push(model);
      };

      ModelPublisher.prototype.publishDataTo = function(data, name) {
        var subscriber, _i, _len, _ref, _results;
        _ref = this.subscriptions[name] || [];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          subscriber = _ref[_i];
          _results.push(subscriber.handle(data));
        }
        return _results;
      };

      return ModelPublisher;

    })();
    return ModelPublisher;
  });

}).call(this);
